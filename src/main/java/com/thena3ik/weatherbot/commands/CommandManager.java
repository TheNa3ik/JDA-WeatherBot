package com.thena3ik.weatherbot.commands;

import com.thena3ik.weatherbot.image.ImageGenerator;
import com.thena3ik.weatherbot.parsers.WeatherData;
import net.dv8tion.jda.api.events.guild.GuildReadyEvent;
import net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;
import net.dv8tion.jda.api.events.interaction.component.ButtonInteractionEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.interactions.commands.OptionMapping;
import net.dv8tion.jda.api.interactions.commands.OptionType;
import net.dv8tion.jda.api.interactions.commands.build.CommandData;
import net.dv8tion.jda.api.interactions.commands.build.Commands;
import net.dv8tion.jda.api.interactions.commands.build.OptionData;
import net.dv8tion.jda.api.interactions.components.buttons.Button;
import net.dv8tion.jda.api.utils.FileUpload;
import net.dv8tion.jda.api.utils.messages.MessageEditData;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class CommandManager extends ListenerAdapter {

    /**
     * Handles slash command interactions from users.
     * This method listens for slash command events and executes corresponding logic based on the command name.
     *
     * @param event The SlashCommandInteractionEvent representing the user interaction with a slash command.
     */
    @Override
    public void onSlashCommandInteraction(SlashCommandInteractionEvent event) {
        String command = event.getName();

        if (command.equals("ping")) {
            // Respond to the "ping" command with "Pong!" as an ephemeral message (visible only to the user).
            event.deferReply().setEphemeral(true).queue();
            event.getHook().sendMessage("Pong!").queue();

        } else if (command.equals("weather")) {

            // Handles the weather command.
            // First, retrieves the "city" option value specified by the user.
            OptionMapping cityOption = event.getOption("city");
            String city = null;
            if (cityOption != null) {
                city = cityOption.getAsString();

                // Capitalize the first letter and make the rest lowercase for better presentation.
                city = city.substring(0, 1).toUpperCase() + city.substring(1).toLowerCase();
            }

            // Acknowledge the interaction to let the user know the bot is processing the request.
            event.deferReply().queue();

            try {
                // Construct the weather message with city name, image, and a button to change the image theme.
                event.getHook().sendMessage("This is the weather in " + city + "!")
                        .addFiles(FileUpload.fromData(new ImageGenerator(city).getAsFile())) // Attach image generated by ImageGenerator
                        .addActionRow(Button.secondary("changeAppearance", "Change appearance (black/white/season)")) // Add a button for theme change
                        .queue();

                // Catch any exceptions that might occur during weather processing and send an ephemeral error message.
            } catch (Exception e) {
                event.getHook().sendMessage("An error occurred while processing your weather request.")
                        .setEphemeral(true)
                        .queue();
            }
        }
    }


    @Override
    public void onButtonInteraction(ButtonInteractionEvent event) {
        // Handle user interaction with the "changeAppearance" button
        if (event.getComponentId().equals("changeAppearance")) {
            ImageGenerator.changeTheme(); // Toggle image theme (color)
            try {
                String city = WeatherData.getCity();

                // Edit the original message to update the image with the new theme
                event.editMessage(MessageEditData.fromFiles(FileUpload.fromData(new ImageGenerator(city).getAsFile())))
                        .queue();
            } catch (IOException e) {
                // Re-throw IOException for further handling (logging, notifying user)
                throw new RuntimeException(e);
            }
        }
    }


    @Override
    public void onGuildReady(GuildReadyEvent event) {
        List<CommandData> commandData = new ArrayList<>();
        commandData.add(Commands.slash("ping", "Default ping-pong game :)"));

        // Command: /weather: <city> <date>
        OptionData providedCity = new OptionData(OptionType.STRING, "city",
                "City where you want to check the weather", true);

        commandData.add(Commands.slash("weather", "Shows an actual weather")
                .addOptions(providedCity));

        event.getGuild().updateCommands().addCommands(commandData).queue();
    }
}
